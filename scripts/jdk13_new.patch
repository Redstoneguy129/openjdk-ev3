diff --git a/make/autoconf/hotspot.m4 b/make/autoconf/hotspot.m4
index c0c1b997c..4caf31386 100644
--- a/make/autoconf/hotspot.m4
+++ b/make/autoconf/hotspot.m4
@@ -313,6 +313,11 @@ AC_DEFUN_ONCE([HOTSPOT_SETUP_JVM_FEATURES],
     HOTSPOT_TARGET_CPU_DEFINE="ARM32"
   fi
 
+  if test "x$OPENJDK_BUILD_CPU" = xarm; then
+    HOTSPOT_BUILD_CPU=arm_32
+    HOTSPOT_BUILD_CPU_DEFINE="ARM32"
+  fi
+
   # Verify that dependencies are met for explicitly set features.
   if HOTSPOT_CHECK_JVM_FEATURE(jvmti) && ! HOTSPOT_CHECK_JVM_FEATURE(services); then
     AC_MSG_ERROR([Specified JVM feature 'jvmti' requires feature 'services'])
diff --git a/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp b/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp
index 0c4d0e0fe..2f7044349 100644
--- a/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp
+++ b/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp
@@ -775,7 +775,7 @@ LIR_Opr LIRGenerator::atomic_xchg(BasicType type, LIR_Opr addr, LIRItem& value)
   bool is_oop = type == T_OBJECT || type == T_ARRAY;
   LIR_Opr result = new_register(type);
   value.load_item();
-  assert(type == T_INT || is_oop LP64_ONLY( || type == T_LONG ), "unexpected type");
+  assert(type == T_INT || is_oop || type == T_LONG, "unexpected type");
   LIR_Opr tmp = (UseCompressedOops && is_oop) ? new_pointer_register() : LIR_OprFact::illegalOpr;
   __ xchg(addr, value.result(), result, tmp);
   return result;
@@ -784,7 +784,7 @@ LIR_Opr LIRGenerator::atomic_xchg(BasicType type, LIR_Opr addr, LIRItem& value)
 LIR_Opr LIRGenerator::atomic_add(BasicType type, LIR_Opr addr, LIRItem& value) {
   LIR_Opr result = new_register(type);
   value.load_item();
-  assert(type == T_INT LP64_ONLY( || type == T_LONG), "unexpected type");
+  assert(type == T_INT || type == T_LONG, "unexpected type");
   LIR_Opr tmp = new_register(type);
   __ xadd(addr, value.result(), result, tmp);
   return result;
@@ -1311,9 +1311,14 @@ void LIRGenerator::volatile_field_store(LIR_Opr value, LIR_Address* address,
                                         CodeEmitInfo* info) {
   if (value->is_double_cpu()) {
     assert(address->index()->is_illegal(), "should have a constant displacement");
-    LIR_Opr tmp = new_pointer_register();
-    add_large_constant(address->base(), address->disp(), tmp);
-    __ volatile_store_mem_reg(value, new LIR_Address(tmp, (intx)0, address->type()), info);
+    LIR_Opr src;
+    if (address->disp() == 0) {
+      src = address->base();
+    } else {
+      src = new_pointer_register();
+      add_large_constant(address->base(), address->disp(), src);
+    }
+    __ volatile_store_mem_reg(value, new LIR_Address(src, (intx)0, address->type()), info);
     return;
   }
   __ store(value, address, info, lir_patch_none);
@@ -1323,9 +1328,14 @@ void LIRGenerator::volatile_field_load(LIR_Address* address, LIR_Opr result,
                                        CodeEmitInfo* info) {
   if (result->is_double_cpu()) {
     assert(address->index()->is_illegal(), "should have a constant displacement");
-    LIR_Opr tmp = new_pointer_register();
-    add_large_constant(address->base(), address->disp(), tmp);
-    __ volatile_load_mem_reg(new LIR_Address(tmp, (intx)0, address->type()), result, info);
+    LIR_Opr src;
+    if (address->disp() == 0) {
+      src = address->base();
+    } else {
+      src = new_pointer_register();
+      add_large_constant(address->base(), address->disp(), src);
+    }
+    __ volatile_load_mem_reg(new LIR_Address(src, (intx)0, address->type()), result, info);
     return;
   }
   __ load(address, result, info, lir_patch_none);
diff --git a/src/hotspot/share/memory/metaspaceShared.cpp b/src/hotspot/share/memory/metaspaceShared.cpp
index f028781ba..9bd39a865 100644
--- a/src/hotspot/share/memory/metaspaceShared.cpp
+++ b/src/hotspot/share/memory/metaspaceShared.cpp
@@ -70,6 +70,7 @@
 #include "utilities/bitMap.hpp"
 #include "utilities/defaultStream.hpp"
 #include "utilities/hashtable.inline.hpp"
+#include "gc/shared/softRefPolicy.hpp"
 #if INCLUDE_G1GC
 #include "gc/g1/g1CollectedHeap.hpp"
 #endif
diff --git a/src/hotspot/share/oops/constantPool.cpp b/src/hotspot/share/oops/constantPool.cpp
index 090a422f1..00c382424 100644
--- a/src/hotspot/share/oops/constantPool.cpp
+++ b/src/hotspot/share/oops/constantPool.cpp
@@ -414,8 +414,12 @@ void ConstantPool::remove_unshareable_info() {
 }
 
 int ConstantPool::cp_to_object_index(int cp_index) {
+  Array<u2> *map = reference_map();
+  if (map == 0)
+    return _no_index_sentinel;
+
   // this is harder don't do this so much.
-  int i = reference_map()->find(cp_index);
+  int i = map->find(cp_index);
   // We might not find the index for jsr292 call.
   return (i < 0) ? _no_index_sentinel : i;
 }
