diff --git a/make/autoconf/flags-other.m4 b/make/autoconf/flags-other.m4
index e10e58930..c72b9390c 100644
--- a/make/autoconf/flags-other.m4
+++ b/make/autoconf/flags-other.m4
@@ -121,6 +121,16 @@ AC_DEFUN([FLAGS_SETUP_ASFLAGS_CPU_DEP],
   # Misuse EXTRA_CFLAGS to mimic old behavior
   $2JVM_ASFLAGS="$JVM_BASIC_ASFLAGS ${$2EXTRA_CFLAGS}"
 
+  if test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-ev3; then
+    $2JVM_ASFLAGS="$JVM_BASIC_ASFLAGS -mcpu=arm926ej-s"
+  elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi1; then
+    $2JVM_ASFLAGS="$JVM_BASIC_ASFLAGS -mcpu=arm1176jzf-s"
+  elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi2; then
+    $2JVM_ASFLAGS="$JVM_BASIC_ASFLAGS -mcpu=cortex-a7"
+  elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi3; then
+    $2JVM_ASFLAGS="$JVM_BASIC_ASFLAGS -mcpu=cortex-a53"
+  fi
+
   AC_SUBST($2JVM_ASFLAGS)
 ])
 
diff --git a/make/autoconf/flags.m4 b/make/autoconf/flags.m4
index 472e7a638..45445f23b 100644
--- a/make/autoconf/flags.m4
+++ b/make/autoconf/flags.m4
@@ -34,7 +34,7 @@ m4_include([flags-other.m4])
 AC_DEFUN([FLAGS_SETUP_ABI_PROFILE],
 [
   AC_ARG_WITH(abi-profile, [AS_HELP_STRING([--with-abi-profile],
-      [specify ABI profile for ARM builds (arm-vfp-sflt,arm-vfp-hflt,arm-sflt, armv5-vfp-sflt,armv6-vfp-hflt,arm64,aarch64) @<:@toolchain dependent@:>@ ])])
+      [specify ABI profile for ARM builds (arm-vfp-sflt,arm-vfp-hflt,arm-sflt,arm-ev3,arm-rpi1,arm-rpi2,arm-rpi3,armv5-vfp-sflt,armv6-vfp-hflt,arm64,aarch64) @<:@toolchain dependent@:>@ ])])
 
   if test "x$with_abi_profile" != x; then
     if test "x$OPENJDK_TARGET_CPU" != xarm && \
@@ -55,6 +55,18 @@ AC_DEFUN([FLAGS_SETUP_ABI_PROFILE],
     elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-sflt; then
       ARM_FLOAT_TYPE=sflt
       ARM_ARCH_TYPE_FLAGS='-march=armv5t -marm'
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-ev3; then
+      ARM_FLOAT_TYPE=sflt
+      ARM_ARCH_TYPE_FLAGS='-mcpu=arm926ej-s -marm'
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi1; then
+      ARM_FLOAT_TYPE=vfp-hflt
+      ARM_ARCH_TYPE_FLAGS='-mcpu=arm1176jzf-s -marm'
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi2; then
+      ARM_FLOAT_TYPE=vfp-hflt
+      ARM_ARCH_TYPE_FLAGS='-mcpu=cortex-a7 -marm'
+    elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarm-rpi3; then
+      ARM_FLOAT_TYPE=vfp-hflt
+      ARM_ARCH_TYPE_FLAGS='-mcpu=cortex-a53 -marm'
     elif test "x$OPENJDK_TARGET_ABI_PROFILE" = xarmv5-vfp-sflt; then
       ARM_FLOAT_TYPE=vfp-sflt
       ARM_ARCH_TYPE_FLAGS='-march=armv5t -marm'
diff --git a/make/autoconf/lib-softfloat.m4 b/make/autoconf/lib-softfloat.m4
new file mode 100644
index 000000000..7fa1ed1ac
--- /dev/null
+++ b/make/autoconf/lib-softfloat.m4
@@ -0,0 +1,57 @@
+#
+# Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# This code is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License version 2 only, as
+# published by the Free Software Foundation.  Oracle designates this
+# particular file as subject to the "Classpath" exception as provided
+# by Oracle in the LICENSE file that accompanied this code.
+#
+# This code is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# version 2 for more details (a copy is included in the LICENSE file that
+# accompanied this code).
+#
+# You should have received a copy of the GNU General Public License version
+# 2 along with this work; if not, write to the Free Software Foundation,
+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+#
+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+# or visit www.oracle.com if you need additional information or have any
+# questions.
+#
+
+################################################################################
+# Setup softfloat helper
+################################################################################
+AC_DEFUN_ONCE([LIB_SETUP_SOFTFLOAT],
+[
+  AC_ARG_WITH(softfloat, [AS_HELP_STRING([--with-softfloat],
+      [specify path to patched softfloat.a])])
+
+  if test "x$NEEDS_LIB_SOFTFLOAT" = xfalse; then
+    if (test "x${with_softfloat}" != x && test "x${with_softfloat}" != xno); then
+      AC_MSG_WARN([[softfloat not used, so --with-softfloat is ignored]])
+    fi
+    SOFTFLOAT_LIBS=
+  else
+    SOFTFLOAT_FOUND=no
+
+    if test "x${with_softfloat}" = xno; then
+      AC_MSG_ERROR([It is not possible to disable the use of softfloat. Remove the --without-softfloat option.])
+    fi
+
+    if test "x${with_softfloat}" != x; then
+      SOFTFLOAT_LIBS="${with_softfloat}"
+      SOFTFLOAT_FOUND=yes
+    fi
+    if test "x$SOFTFLOAT_FOUND" = xno; then
+      HELP_MSG_MISSING_DEPENDENCY([softfloat])
+      AC_MSG_ERROR([Could not find softfloat! $HELP_MSG])
+    fi
+  fi
+
+  AC_SUBST(SOFTFLOAT_LIBS)
+])
diff --git a/make/autoconf/libraries.m4 b/make/autoconf/libraries.m4
index ab40c8bd2..fca2f8316 100644
--- a/make/autoconf/libraries.m4
+++ b/make/autoconf/libraries.m4
@@ -33,6 +33,7 @@ m4_include([lib-std.m4])
 m4_include([lib-x11.m4])
 m4_include([lib-fontconfig.m4])
 m4_include([lib-tests.m4])
+m4_include([lib-softfloat.m4])
 
 ################################################################################
 # Determine which libraries are needed for this configuration
@@ -79,6 +80,13 @@ AC_DEFUN_ONCE([LIB_DETERMINE_DEPENDENCIES],
     NEEDS_LIB_ALSA=false
   fi
 
+  if (test "x$OPENJDK_TARGET_CPU" == xarm &&
+      test "x$ARM_FLOAT_TYPE" = xsflt); then
+    NEEDS_LIB_SOFTFLOAT=true
+  else
+    NEEDS_LIB_SOFTFLOAT=false
+  fi
+
   # Check if ffi is needed
   if HOTSPOT_CHECK_JVM_VARIANT(zero); then
     NEEDS_LIB_FFI=true
@@ -98,6 +106,7 @@ AC_DEFUN_ONCE([LIB_SETUP_LIBRARIES],
   LIB_SETUP_FONTCONFIG
   LIB_SETUP_FREETYPE
   LIB_SETUP_ALSA
+  LIB_SETUP_SOFTFLOAT
   LIB_SETUP_LIBFFI
   LIB_SETUP_BUNDLED_LIBS
   LIB_SETUP_MISC_LIBS
diff --git a/make/autoconf/spec.gmk.in b/make/autoconf/spec.gmk.in
index c08bec082..13599e301 100644
--- a/make/autoconf/spec.gmk.in
+++ b/make/autoconf/spec.gmk.in
@@ -345,6 +345,7 @@ FONTCONFIG_CFLAGS:=@FONTCONFIG_CFLAGS@
 CUPS_CFLAGS:=@CUPS_CFLAGS@
 ALSA_LIBS:=@ALSA_LIBS@
 ALSA_CFLAGS:=@ALSA_CFLAGS@
+SOFTFLOAT_LIBS:=@SOFTFLOAT_LIBS@
 LIBFFI_LIBS:=@LIBFFI_LIBS@
 LIBFFI_CFLAGS:=@LIBFFI_CFLAGS@
 ENABLE_LIBFFI_BUNDLING:=@ENABLE_LIBFFI_BUNDLING@
diff --git a/make/hotspot/lib/CompileJvm.gmk b/make/hotspot/lib/CompileJvm.gmk
index a4b67f09f..15f8ae62d 100644
--- a/make/hotspot/lib/CompileJvm.gmk
+++ b/make/hotspot/lib/CompileJvm.gmk
@@ -49,6 +49,7 @@ JVM_LDFLAGS += \
 
 JVM_LIBS += \
     $(JVM_LIBS_FEATURES) \
+    $(SOFTFLOAT_LIBS) \
     #
 
 # These files and directories are always excluded
diff --git a/src/hotspot/cpu/arm/assembler_arm_32.hpp b/src/hotspot/cpu/arm/assembler_arm_32.hpp
index 53d6d17de..c949c6363 100644
--- a/src/hotspot/cpu/arm/assembler_arm_32.hpp
+++ b/src/hotspot/cpu/arm/assembler_arm_32.hpp
@@ -498,7 +498,7 @@ class Assembler : public AbstractAssembler  {
   void dmb(DMB_Opt opt, Register reg) {
     if (VM_Version::arm_arch() >= 7) {
       emit_int32(0xF57FF050 | opt);
-    } else {
+    } else if (VM_Version::arm_arch() == 6) {
       bool preserve_tmp = (reg == noreg);
       if(preserve_tmp) {
         reg = Rtemp;
@@ -1239,10 +1239,11 @@ extern int  __aeabi_dcmpgt(double, double);
 
 // Imported code from glibc soft-fp bundle for
 // calculation accuracy improvement. See CR 6757269.
-extern double __aeabi_fadd_glibc(float, float);
-extern double __aeabi_fsub_glibc(float, float);
+extern float  __aeabi_fadd_glibc(float, float);
+extern float  __aeabi_fsub_glibc(float, float);
 extern double __aeabi_dadd_glibc(double, double);
 extern double __aeabi_dsub_glibc(double, double);
+
 };
 #endif // __SOFTFP__
 
diff --git a/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.hpp b/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.hpp
index 9e6bda265..01a4adebf 100644
--- a/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.hpp
+++ b/src/hotspot/os_cpu/linux_arm/orderAccess_linux_arm.hpp
@@ -72,7 +72,7 @@ inline static void dmb_sy() {
      __asm__ volatile (
      ".word 0xF57FF050 | 0xf" : : : "memory");
 #endif
-   } else {
+   } else if (VM_Version::arm_arch() == 6) {
      intptr_t zero = 0;
      __asm__ volatile (
        "mcr p15, 0, %0, c7, c10, 5"
@@ -96,7 +96,7 @@ inline static void dmb_st() {
      __asm__ volatile (
      ".word 0xF57FF050 | 0xe" : : : "memory");
 #endif
-   } else {
+   } else if (VM_Version::arm_arch() == 6) {
      intptr_t zero = 0;
      __asm__ volatile (
        "mcr p15, 0, %0, c7, c10, 5"
