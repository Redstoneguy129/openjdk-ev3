diff -Naur old/make/autoconf/hotspot.m4 new/make/autoconf/hotspot.m4
--- old/make/autoconf/hotspot.m4	2019-05-21 18:53:27.000000000 +0000
+++ new/make/autoconf/hotspot.m4	2019-06-06 09:48:27.493813162 +0000
@@ -312,6 +312,11 @@
     HOTSPOT_TARGET_CPU_ARCH=arm
   fi
 
+  if test "x$OPENJDK_BUILD_CPU" = xarm; then
+    HOTSPOT_BUILD_CPU=arm_32
+    HOTSPOT_BUILD_CPU_DEFINE="ARM32"
+  fi
+
   # Verify that dependencies are met for explicitly set features.
   if HOTSPOT_CHECK_JVM_FEATURE(jvmti) && ! HOTSPOT_CHECK_JVM_FEATURE(services); then
     AC_MSG_ERROR([Specified JVM feature 'jvmti' requires feature 'services'])
diff -Naur old/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp new/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp
--- old/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp	2019-05-21 18:53:27.000000000 +0000
+++ new/src/hotspot/cpu/arm/c1_LIRGenerator_arm.cpp	2019-06-06 09:48:27.493813162 +0000
@@ -1009,7 +1009,7 @@
   bool is_oop = type == T_OBJECT || type == T_ARRAY;
   LIR_Opr result = new_register(type);
   value.load_item();
-  assert(type == T_INT || is_oop LP64_ONLY( || type == T_LONG ), "unexpected type");
+  assert(type == T_INT || is_oop || type == T_LONG, "unexpected type");
   LIR_Opr tmp = (UseCompressedOops && is_oop) ? new_pointer_register() : LIR_OprFact::illegalOpr;
   __ xchg(addr, value.result(), result, tmp);
   return result;
@@ -1018,7 +1018,7 @@
 LIR_Opr LIRGenerator::atomic_add(BasicType type, LIR_Opr addr, LIRItem& value) {
   LIR_Opr result = new_register(type);
   value.load_item();
-  assert(type == T_INT LP64_ONLY( || type == T_LONG), "unexpected type");
+  assert(type == T_INT || type == T_LONG, "unexpected type");
   LIR_Opr tmp = new_register(type);
   __ xadd(addr, value.result(), result, tmp);
   return result;
@@ -1559,9 +1559,14 @@
 #ifndef AARCH64
   if (value->is_double_cpu()) {
     assert(address->index()->is_illegal(), "should have a constant displacement");
-    LIR_Opr tmp = new_pointer_register();
-    add_large_constant(address->base(), address->disp(), tmp);
-    __ volatile_store_mem_reg(value, new LIR_Address(tmp, (intx)0, address->type()), info);
+    LIR_Opr src;
+    if (address->disp() == 0) {
+      src = address->base();
+    } else {
+      src = new_pointer_register();
+      add_large_constant(address->base(), address->disp(), src);
+    }
+    __ volatile_store_mem_reg(value, new LIR_Address(src, (intx)0, address->type()), info);
     return;
   }
 #endif // !AARCH64
@@ -1574,9 +1579,14 @@
 #ifndef AARCH64
   if (result->is_double_cpu()) {
     assert(address->index()->is_illegal(), "should have a constant displacement");
-    LIR_Opr tmp = new_pointer_register();
-    add_large_constant(address->base(), address->disp(), tmp);
-    __ volatile_load_mem_reg(new LIR_Address(tmp, (intx)0, address->type()), result, info);
+    LIR_Opr src;
+    if (address->disp() == 0) {
+      src = address->base();
+    } else {
+      src = new_pointer_register();
+      add_large_constant(address->base(), address->disp(), src);
+    }
+    __ volatile_load_mem_reg(new LIR_Address(src, (intx)0, address->type()), result, info);
     return;
   }
 #endif // !AARCH64
diff -Naur old/src/hotspot/share/memory/metaspaceShared.cpp new/src/hotspot/share/memory/metaspaceShared.cpp
--- old/src/hotspot/share/memory/metaspaceShared.cpp	2019-05-21 18:53:27.000000000 +0000
+++ new/src/hotspot/share/memory/metaspaceShared.cpp	2019-06-06 09:48:27.497813215 +0000
@@ -62,6 +62,7 @@
 #include "utilities/align.hpp"
 #include "utilities/defaultStream.hpp"
 #include "utilities/hashtable.inline.hpp"
+#include "gc/shared/softRefPolicy.hpp"
 #if INCLUDE_G1GC
 #include "gc/g1/g1Allocator.inline.hpp"
 #include "gc/g1/g1CollectedHeap.hpp"
diff -Naur old/src/hotspot/share/oops/constantPool.cpp new/src/hotspot/share/oops/constantPool.cpp
--- old/src/hotspot/share/oops/constantPool.cpp	2019-05-21 18:53:27.000000000 +0000
+++ new/src/hotspot/share/oops/constantPool.cpp	2019-06-06 09:48:27.501813268 +0000
@@ -400,8 +400,12 @@
 }
 
 int ConstantPool::cp_to_object_index(int cp_index) {
+  Array<u2> *map = reference_map();
+  if (map == 0)
+    return _no_index_sentinel;
+
   // this is harder don't do this so much.
-  int i = reference_map()->find(cp_index);
+  int i = map->find(cp_index);
   // We might not find the index for jsr292 call.
   return (i < 0) ? _no_index_sentinel : i;
 }
